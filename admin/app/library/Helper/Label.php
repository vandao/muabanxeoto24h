<?php

class Label extends \Phalcon\Mvc\User\Component {

    public function __construct() {}

    public function label($key, $allowHtml = true, $variables = array(), $languageId = false) {
        $key = 'Label-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function error($key, $allowHtml = true, $variables = array(), $languageId = false) {
        $key = 'Error-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function success($key, $allowHtml = true, $variables = array(), $languageId = false) {
        $key = 'Success-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function notice($key, $allowHtml = true, $variables = array(), $languageId = false) {
        $key = 'Notice-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function warning($key, $allowHtml = true, $variables = array(), $languageId = false) {
        $key = 'Warning-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function message($key, $allowHtml = true, $variables = array(), $languageId = false) {
        $key = 'Message-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function button($key, $allowHtml = true, $variables = array(), $languageId = false) {
        $key = 'Button-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function popup($key, $allowHtml = true, $variables = array(), $languageId = false) {
        $key = 'Popup-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function menu($key, $allowHtml = true, $variables = array(), $languageId = false) {
        $key = 'Menu-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function page($key, $allowHtml = false, $variables = array(), $languageId = false) {
        $key = 'Page-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function title($key, $allowHtml = false, $variables = array(), $languageId = false) {
        $key = 'Title-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function form($key, $allowHtml = false, $variables = array(), $languageId = false) {
        $key = 'Form-' . $key;

        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function normal($key, $allowHtml = true, $variables = array(), $languageId = false) {
        return $this->getLabel($key, $allowHtml, $variables, $languageId);
    }

    public function getLabel($key, $allowHtml = true, $variables = array(), $languageId = false) {
        if ($languageId) {
            $label = SystemLabel::getByKeyAndLanguage($key, $languageId);
        } else {
            if (isset($this->systemLabel[$key])) {
                $label = $this->systemLabel[$key];
            } else {
                $label = $this->_newLabel($key);
            }
        }
        // if (! $label) {
        //     echo $key;exit;
        // }
        if ($label->label_value) {
            $value = $label->label_value;
        } else {
            $value = $label->Key;
        }

        if (count($variables) > 0) {
            foreach ($variables as $variableKey => $variableValue) {
                $value = str_replace($variableKey, $variableValue, $value);
            }
        }

        if (SystemLabel::EDITALBLE_TEXT && $allowHtml && $this->acl->isAllowEditLabel) {
            $editable = array(
                'label_value' => $value,
                'label_hint'  => $label->label_hint,
                'language_id' => $label->language_id,
            );

            return "<span class='label-editable' data-type='label' data-pk='$label->id' data-value='" . json_encode($editable) . "'>{$value}</span>";
        } else {
            return $value;
        }
    }
  
    private function _newLabel($key) {
        $languageId = $this->session->get('lang_id');
        $value      = $this->_filterValue($key);
    
        $newLabel = array(
            'label_key'     => $key,
            'section'       => SystemLabel::SECTION,
            'languages'     => array(
                $languageId => array(
                    'label_value' => $value,
                    'label_hint'  => "",
                    'is_approved' => 0,
                )
            )
        );

        $systemLabel = new SystemLabel();

        if ($systemLabel->saveAutoGenerateData($newLabel)) {
            return SystemLabel::getByKeyAndLanguage($key, $languageId);
        }

        return false;
    }

    private function _filterValue($value) {
        if (stripos($value, '-')) $value = substr($value, stripos($value, '-') + 1);
        $value    = str_replace(array('-Menu'), array(''), $value);
        $value    = str_replace(array('-', '_'), array(' ', ' _'), $value);

        return $value;
    }
}