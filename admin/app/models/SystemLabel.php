<?php

use Phalcon\Mvc\Model\Resultset\Simple as Resultset;
use Phalcon\Mvc\Model\Validator\Uniqueness;

class SystemLabel extends SystemLabelDbTable
{
    const SECTION        = 'Backend';
    const ENBABLE_HINTS  = true;
    const EDITALBLE_TEXT = true;

    static public function getSections()
    {
        $label = new Label();

        return array(
            'Backend'  => $label->label('Backend'),
            'Frontend' => $label->label('Frontend'),
            'Api'      => $label->label('API'),
        );
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        parent::initialize();
    }

    public function beforeValidationOnCreate()
    {
        $this->is_approved = 0;
    }
    
    public function beforeValidationOnUpdate()
    {
    }

    public function validation()
    {
        $this->validate(new Uniqueness(array(
            'field'   => array('label_key','section'),
            'message' => 'Label existed'
            //'message' => LabelMessage::rowExisted('Key')
        )));

        if ($this->validationHasFailed() == true) {
            return false;
        }
    }

    static public function saveAutoGenerateData($data) {
        $systemLabel = SystemLabel::findFirst(array(
            "conditions"  => "section = ?0 AND label_key = ?1",
            "bind"        => array(
                    0 => $data['section'],
                    1 => $data['label_key'],
                )
        ));
        if (! $systemLabel) $systemLabel = new SystemLabel();

        $systemLabel->save($data);

        return SystemLabelLanguage::saveAutoGenerateData($systemLabel->id, $data['languages']);
    }

    static public function filter($params, $isGetAllLanguage = false) {
        $filters = array(
            'equalTo'    => array(
                "section"      => "section",
                "language_id"  => "SystemLabelLanguage.language_id",
                "label_key"    => "label_key",
                "is_approved"  => "SystemLabelLanguage.is_approved"
            ),
            'likeFirst'  => array(
            ),
            'likeAll'    => array(
                "label_value" => "SystemLabelLanguage.label_value"
            ),
        );
        $sorts   = array(
            'idSort'        => 'SystemLabel.id',
            'labelKeySort'  => 'label_key'
        );

        $model   = new SystemLabel();
        $builder = $model->getModelsManager()->createBuilder()
                    ->from('SystemLabel')
                    ->leftJoin('SystemLabelLanguage', 'SystemLabelLanguage.system_label_id = SystemLabel.id')
                    ->columns(array(
                        "SystemLabel.id", "label_key", "section",
                        "SystemLabelLanguage.id AS system_label_language_id",
                        "SystemLabelLanguage.language_id", "label_value", "label_hint", "is_approved"
                    ));

        if (! $isGetAllLanguage) {
            $languageId = SystemLanguage::getCurrentLanguageId();

            $builder->where('SystemLabelLanguage.language_id = :language_id:', array('language_id' => $languageId));
        }


        $builderFilter = new BuilderFilter();
        $builder       = $builderFilter->filter($builder, $params, $filters, $sorts);
        // echo $builder->getPhql();exit;
        
        return $builder;
    }

    static function getAllByLanguage() {
        $params = array(
            'idSort' => "DESC"
        );

        $builder = SystemLabel::filter($params);

        return $builder->getQuery()->execute();
    }

    static function getByKeyAndLanguage($key, $languageId) {
        $params = array(
            'label_key'   => $key,
            'language_id' => $languageId,
            'idSort'      => "DESC"
        );

        $builder = SystemLabel::filter($params);

        foreach ($builder->getQuery()->execute() as $label) {
            return $label;
        }

        return false;
    }

    static function getFormData($id) {
        $main = SystemLabel::findFirstByid($id);

        if ($main) {
            $main = $main->toArray();

            foreach (SystemLabelLanguage::find("system_label_id = '$id'") as $mainLanguage) {
                $labelValueKey  = 'label_value_' . $mainLanguage->language_id;
                $labelHintKey   = 'label_hint_' . $mainLanguage->language_id;
                $isApprovedKey  = 'is_approved_' . $mainLanguage->language_id;

                $main[$labelValueKey] = $mainLanguage->label_value;
                $main[$labelHintKey]  = $mainLanguage->label_hint;
                $main[$isApprovedKey] = $mainLanguage->is_approved;
            }
        }

        return $main;
    }

    static function getAllForExport($section) {
        $params = array(
            'section'      => $section,
            'is_approved'  => 1,
            'labelKeySort' => "ASC"
        );

        $builder = SystemLabel::filter($params, true);
        $labels  = $builder->getQuery()->execute();

        $languages = SystemLanguage::fetchPair("id", "language_code", false);
        $data      = array();

        foreach ($languages as $languageId => $languageCode) {
            $data[$languageCode] = array();

            foreach ($labels as $systemLabel) {
                if ($systemLabel->language_id == $languageId) {
                    unset($systemLabel->position);
                    unset($systemLabel->language_id);
                    unset($systemLabel->is_disabled);
                    
                    $data[$languageCode][$systemLabel->label_key] = $systemLabel->label_value;
                }
            }
        }

        return $data;
    }
}