<?php

use Phalcon\Mvc\Model\Validator\Uniqueness;

class SystemLabelLanguage extends SystemLabelLanguageDbTable
{
    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        parent::initialize();
    }

    public function beforeValidationOnCreate()
    {
        if (! $this->is_approved) $this->is_approved = 0;
    }
    
    public function beforeValidationOnUpdate()
    {
    }

    public function validation()
    {
        $this->validate(new Uniqueness(array(
            'field'   => array('system_label_id','language_id'),
            'message' => 'Label existed'
            //'message' => LabelMessage::rowExisted('Key')
        )));

        if ($this->validationHasFailed() == true) {
            return false;
        }
    }

    static public function saveFormData($mainId, $formData) {
        $data = FormData::parseFormDataByKey($formData);

        foreach ($data as $languageId => $language) {
            $language['system_label_id'] = $mainId;
            $language['language_id']     = $languageId;

            if (! isset($language['is_approved'])) {
                $language['is_approved'] = 0;
            } else {
                $language['is_approved'] = 1;
            }

            $languageModel = SystemLabelLanguage::getByMainId($mainId, $languageId);

            if (! $languageModel) $languageModel = new SystemLabelLanguage();

            $languageModel->save($language);
        }
    }

    static public function getByMainId($mainId, $languageId) {
        return SystemLabelLanguage::findFirst("system_label_id = '$mainId' AND language_id = '$languageId'");
    }

    static public function saveAutoGenerateData($mainId, $items) {
        $i = 0;
        foreach ($items as $languageId => $item) {
            $systemLabelLanguage = SystemLabelLanguage::findFirst("system_label_id = $mainId AND language_id = $languageId");
            if (! $systemLabelLanguage) $systemLabelLanguage = new SystemLabelLanguage();

            $item['system_label_id'] = $mainId;
            $item['language_id']     = $languageId;

            if (! isset($item['is_approved'])) {
                $item['is_approved'] = 0;
            } else {
                $item['is_approved'] = 1;
            }
            
            if ($systemLabelLanguage->save($item)) {
                $i++;
            }
        }

        if ($i) return true;

        return false;
    }

    static public function deleteByMainId($mainId) {
        $model = new SystemLabelLanguage();

        $query = new Phalcon\Mvc\Model\Query(
                "DELETE FROM SystemLabelLanguage WHERE system_label_id = ". $mainId,
                $model->getDI());

        $query->execute();
    }

    static public function getSystemLabelIdByValue($value){
        $systemLabelLanguages = SystemLabelLanguage::find(
            array(
                "value like :value:",
                "bind" => array("value" => "%$value%")
            ));

        $systemLabelIds = array();
        foreach ($systemLabelLanguages as $item) {
            $systemLabelIds[] = $item->system_label_id;
        }

        $systemLabelIds = implode(",", $systemLabelIds);
        if (!$systemLabelIds) $systemLabelIds = "NULL";
        return $systemLabelIds;
    }

    static public function getSystemLabelIdByApproved($value){
        $systemLabelLanguages = SystemLabelLanguage::find(
            array(
                "is_approved = :value:",
                "bind" => array("value" => $value)
            ));

        $systemLabelIds = array();
        foreach ($systemLabelLanguages as $item) {
            $systemLabelIds[] = $item->system_label_id;
        }

        $systemLabelIds = implode(",", $systemLabelIds);
        if (!$systemLabelIds) $systemLabelIds = "NULL";
        return $systemLabelIds;
    }


}